<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- This string array should be overridden by the device to present a list of network attributes. This is used by the connectivity manager to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx], [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet] -->
    <!-- the 5th element "resore-time" indicates the number of milliseconds to delay before automatically restore the default connection.  Set -1 if the connection does not require auto-restore. -->
    <!-- the 6th element indicates boot-time dependency-met value. -->
    <string-array name="networkAttributes">
        <item>bluetooth,7,7,2,-1,true</item>
        <item>ethernet,9,9,4,-1,true</item>
        <item>mobile_cbs,12,0,2,300000,true</item>
        <item>mobile_dun,4,0,2,300000,true</item>
        <item>mobile_fota,10,0,2,300000,true</item>
        <item>mobile_hipri,5,0,3,300000,true</item>
        <item>mobile_ims,11,0,2,300000,true</item>
        <item>mobile_mms,2,0,2,300000,true</item>
        <item>mobile_supl,3,0,2,300000,true</item>
        <item>mobile,0,0,0,-1,true</item>
        <item>wifi,1,1,1,-1,true</item>
    </string-array>
    <!-- This string array should be overridden by the device to present a list of radio attributes. This is used by the connectivity manager to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType], [# simultaneous connection types]" -->
    <string-array name="radioAttributes">
        <item>1,1</item>
        <item>0,1</item>
        <item>7,1</item>
        <item>9,1</item>
    </string-array>
    <!-- List of regexpressions describing the interface (if any) that represent tetherable USB interfaces. If the device doesn't want to support tething over USB this should be empty. An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"usb\\d"</item>
        <item>"rndis\\d"</item>
    </string-array>
    <!-- List of regexpressions describing the interface (if any) that represent tetherable Wifi interfaces. If the device doesn't want to support tethering over Wifi this should be empty. An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan0"</item>
    </string-array>
    <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
    <bool name="config_cellBroadcastAppLinks">true</bool>
    <!-- List of regexpressions describing the interface (if any) that represent tetherable bluetooth interfaces. If the device doesn't want to support tethering over bluetooth this should be empty. -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
        <item>"bnep\\d"</item>
        <item>"bt-pan"</item>
    </string-array>
    <!-- When true, the tethering upstream network follows the current default Internet network (except when the current default network is mobile, in which case a DUN network will be used if required). -->
    <bool translatable="false" name="config_tether_upstream_automatic">true</bool>
    <!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
    <bool translatable="false" name="config_wifi_dual_band_support">true</bool>
    <!-- Boolean indicating whether the wifi chipset has background scan support -->
    <bool translatable="false" name="config_wifi_background_scan_support">true</bool>
    <!-- Wifi driver supports batched scan -->
    <bool translatable="false" name="config_wifi_batched_scan_supported">true</bool>
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings. Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>
    <!-- Flag indicating whether we should enable smart battery. -->
    <bool name="config_smart_battery_available">true</bool>
    <!-- If this is true, the screen will come on when you plug/unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>
    <!-- Indicate whether closing the lid causes the device to go to sleep and opening it causes the device to wake up. The default is false. -->
    <bool name="config_lidControlsSleep">true</bool>
    <!-- Boolean indicating whether the HWC setColorTransform function can be performed efficiently in hardware. -->
    <bool name="config_setColorTransformAccelerated">true</bool>
    <!-- Indicate whether to allow the device to suspend when the screen is off due to the proximity sensor. This resource should only be set to true if the sensor HAL correctly handles the proximity sensor as a wake-up source. Otherwise, the device may fail to wake out of suspend reliably. The default is false. -->
    <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>
    <!-- Default LED on time for notification LED in milliseconds. -->
    <integer name="config_defaultNotificationLedOn">2500</integer>
    <!-- Default LED off time for notification LED in milliseconds. -->
    <integer name="config_defaultNotificationLedOff">5000</integer>
    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>
    <!-- Is the device capable of hot swapping an ICC Card -->
    <bool name="config_hotswapCapable">true</bool>
    <!-- Minimum screen brightness setting allowed by the power manager. The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">2</integer>
    <!-- Minimum screen brightness allowed by the power manager. -->
    <integer name="config_screenBrightnessDim">2</integer>
    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support. The N entries of this array define N + 1 control points as follows: (1-based arrays) Point 1:          (0, value[1]):           lux <= 0 Point 2:  (level[1], value[2]):  0       < lux <= level[1] Point 3:  (level[2], value[3]):  level[2] < lux <= level[3] ... Point N+1: (level[N], value[N+1]):  level[N] < lux The control points must be strictly increasing.  Each control point corresponds to an entry in the brightness backlight values arrays. For example, if LUX == level[1] (first element of the levels array) then the brightness will be determined by value[2] (second element of the brightness values array). Spline interpolation is used to determine the auto-brightness backlight values for LUX levels between these control points. Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>25</item>
        <item>100</item>
        <item>200</item>
        <item>400</item>
        <item>800</item>
        <item>1000</item>
        <item>1400</item>
        <item>1800</item>
        <item>2500</item>
    </integer-array>
    <!-- Array of output values for LCD backlight corresponding to the LUX values in the config_autoBrightnessLevels array. This array should have size one greater than the size of the config_autoBrightnessLevels array. The brightness values must be between 0 and 255 and be non-decreasing. This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>5</item>
        <item>20</item>
        <item>50</item>
        <item>80</item>
        <item>100</item>
        <item>120</item>
        <item>140</item>
        <item>180</item>
        <item>220</item>
        <item>255</item>
    </integer-array>
    <!-- The list of components which should be automatically disabled for a specific device. -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
        <item>com.google.android.gms/com.google.android.gms.nearby.messages.service.NearbyMessagesService</item>
    </string-array>
    <!-- Boolean indicating if current platform supports BLE peripheral mode -->
    <bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>
    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true-->
    <bool translatable="false" name="skip_restoring_network_selection">true</bool>
    <!-- MMS user agent string -->
    <string name="config_mms_user_agent" translatable="false">Android-Mms/2.0</string>
    <!-- MMS user agent prolfile url -->
    <string name="config_mms_user_agent_profile_url" translatable="false">http://www.google.com/oha/rdf/ua-profile-kila.xml</string>
    <!-- Enable doze mode -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>
    <bool name="config_dozeAfterScreenOffByDefault">true</bool>
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
    <!-- Configure mobile tcp buffer sizes in the form: rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max. If no value is found for the rat-name in use, the system default will be applied. -->
    <string-array name="config_mobile_tcp_buffers">
        <item>"edge:4093,26280,35040,4096,16384,35040"</item>
        <item>"evdo:4094,87380,524288,4096,16384,262144"</item>
        <item>"gprs:4092,8760,11680,4096,8760,11680"</item>
        <item>"hsdpa:4094,87380,1220608,4096,16384,1220608"</item>
        <item>"hspa:4094,87380,1220608,4096,16384,1220608"</item>
        <item>"hspap:4094,87380,1220608,4096,16384,1220608"</item>
        <item>"hsupa:4094,87380,1220608,4096,16384,1220608"</item>
        <item>"lte:2097152,4194304,8388608,262144,524288,1048576"</item>
        <item>"umts:4094,87380,1220608,4096,16384,1220608"</item>
    </string-array>
    <!-- Whether WiFi display is supported by this device. There are many prerequisites for this feature to work correctly. Here are a few of them: * The WiFi radio must support WiFi P2P. * The WiFi radio must support concurrent connections to the WiFi display and to an access point. * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix" remote submix module.  This module is used to record and stream system audio output to the WiFi display encoder in the media server. * The remote submix module "audio.r_submix.default" must be installed on the device. * The device must be provisioned with HDCP keys (for protected content). -->
    <bool name="config_enableWifiDisplay">true</bool>
    <!-- Flag indicating if the speed up audio on mt call code should be executed -->
    <bool name="config_speed_up_audio_on_mt_calls">true</bool>
    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes on the headphone/microphone jack. When false use the older uevent framework -->
    <bool name="config_useDevInputEventForAudioJack">true</bool>
    <!-- Set to true if the wifi display supports compositing content stored in gralloc protected buffers.  For this to be true, there must exist a protected hardware path for surface flinger to composite and send protected buffers to the wifi display video encoder. If this flag is false, we advise applications not to use protected buffers (if possible) when presenting content to a wifi display because the content may be blanked. This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS} flag is set for wifi displays. -->
    <bool name="config_wifiDisplaySupportsProtectedBuffers">true</bool>
    <!-- Flag specifying whether VoLTE is available on device -->
    <bool name="config_device_volte_available">true</bool>
    <!-- Flag specifying whether VoLTE should be available for carrier: independent of carrier provisioning. If false: hard disabled. If true: then depends on carrier provisioning, availability etc -->
    <bool name="config_carrier_volte_available">true</bool>
    <!-- Flag specifying whether VT is available on device -->
    <bool name="config_device_vt_available">true</bool>
    <!-- Flag specifying whether VT should be available for carrier: independent of carrier provisioning. If false: hard disabled. If true: then depends on carrier provisioning, availability etc -->
    <bool name="config_carrier_vt_available">true</bool>
    <!-- Config determines whether to update phone object when voice registration state changes. Voice radio tech change will always trigger an update of phone object irrespective of this config -->
    <bool name="config_switch_phone_on_voice_reg_state_change">false</bool>
    <!-- Disable Manual Network Selection in Global Mode -->
    <string translatable="false" name="prohibit_manual_network_selection_in_gobal_mode">true</string>
    <!-- Whether device supports double tap to wake -->
    <bool name="config_supportDoubleTapWake">true</bool>
    <!-- Default list of files pinned by the Pinner Service -->
    <string-array translatable="false" name="config_defaultPinnerServiceFiles">
        <item>"/system/framework/arm64/boot-core-libart.art"</item>
        <item>"/system/framework/arm64/boot-core-libart.oat"</item>
        <item>"/system/framework/arm64/boot-framework.art"</item>
        <item>"/system/framework/arm64/boot-framework.oat"</item>
        <item>"/system/framework/arm64/boot.art"</item>
        <item>"/system/framework/arm64/boot.oat"</item>
        <item>"/system/framework/boot-core-libart.vdex"</item>
        <item>"/system/framework/boot-framework.vdex"</item>
        <item>"/system/framework/boot.vdex"</item>
        <item>"/system/framework/oat/arm64/services.odex"</item>
        <item>"/system/framework/oat/arm64/services.vdex"</item>
        <item>"/system/framework/services.jar"</item>
        <item>"/system/lib/libsurfaceflinger.so"</item>
        <item>"/system/lib64/libsurfaceflinger.so"</item>
        <item>"/system/priv-app/SystemUI/oat/arm64/SystemUI.odex"</item>
        <item>"/system/priv-app/SystemUI/oat/arm64/SystemUI.vdex"</item>
        <item>"/system/priv-app/SystemUI/SystemUI.apk"</item>
    </string-array>
    <!-- Should the pinner service pin the Home application? -->
    <bool name="config_pinnerHomeApp">true</bool>
    <!-- Specifies whether the permissions needed by a legacy app should be reviewed before any of its components can run. A legacy app is one with targetSdkVersion < 23, i.e apps using the old permission model. If review is not required, permissions are reviewed before the app is installed. -->
    <bool name="config_permissionReviewRequired">true</bool>
</resources>
